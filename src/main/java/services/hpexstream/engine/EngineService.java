package services.hpexstream.engine;

import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Paths;

import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.4.2
 * 2019-03-20T22:07:25.804-05:00
 * Generated source version: 2.4.2
 * 
 */
@WebServiceClient(name = "EngineService", 
                  wsdlLocation = "file:/D:/Fuentes/Java/Rimac/webservice-rest/src/main/wsdl/EngineService.wsdl",
                  targetNamespace = "urn:hpexstream-services/Engine") 
public class EngineService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("urn:hpexstream-services/Engine", "EngineService");
    public final static QName EngineServicePort = new QName("urn:hpexstream-services/Engine", "EngineServicePort");
    
    
    static {
        URL url = null;
        try {
            url = new URL("http://192.168.1.227:8080/EngineService/EngineService?wsdl");
        	//url = new URL("http://172.23.2.115:8080/EngineService/EngineService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(EngineService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", Paths.get("").toAbsolutePath() + "/src/main/wsdl/EngineService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public EngineService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public EngineService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public EngineService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public EngineService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public EngineService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public EngineService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns EngineWebService
     */
    @WebEndpoint(name = "EngineServicePort")
    public EngineWebService getEngineServicePort() {
        return super.getPort(EngineServicePort, EngineWebService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns EngineWebService
     */
    @WebEndpoint(name = "EngineServicePort")
    public EngineWebService getEngineServicePort(WebServiceFeature... features) {
        return super.getPort(EngineServicePort, EngineWebService.class, features);
    }

}
